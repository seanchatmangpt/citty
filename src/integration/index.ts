/**\n * üåê Ecosystem Integration: Complete UnJS Workflow Integration\n * Centralized exports and orchestration for all ecosystem bridges\n * Production-ready integration with hot reload, testing, and plugin architecture\n */\n\n// Core integrations\nexport * from './untology-unjucks-bridge'\nexport * from './nuxt-module'\nexport * from './nitro-plugin'\nexport * from './h3-middleware'\nexport * from './vite-plugin'\nexport * from './testing-utilities'\nexport * from './dev-server'\nexport * from './plugin-architecture'\nexport * from './workflow-integration'\n\n// Re-export main classes and functions for convenience\nexport {\n  UntologyUnjucksBridge,\n  bridge as untologyBridge,\n  generateFromSemanticOntology\n} from './untology-unjucks-bridge'\n\nexport {\n  UnjucksNuxtModule,\n  UnjucksNuxtModule as default\n} from './nuxt-module'\n\nexport {\n  unjucksNitroPlugin as nitroPlugin,\n  getUnjucksEngine,\n  renderTemplateHandler,\n  UnjucksNitroEngine\n} from './nitro-plugin'\n\nexport {\n  createUnjucksMiddleware,\n  UnjucksH3Middleware\n} from './h3-middleware'\n\nexport {\n  unjucksVite as vitePlugin,\n  UnjucksVitePlugin\n} from './vite-plugin'\n\nexport {\n  setupTestEnvironment,\n  createTemplateTestSuite,\n  TestFixtures,\n  TemplateTestRunner,\n  TestHelpers,\n  templateMatchers\n} from './testing-utilities'\n\nexport {\n  startDevServer,\n  createDevServerCommand,\n  UnjucksDevServer\n} from './dev-server'\n\nexport {\n  PluginManager,\n  getPluginManager,\n  initializePlugins,\n  executePluginHook,\n  registerPlugin,\n  definePlugin,\n  definePluginFactory,\n  definePluginClass\n} from './plugin-architecture'\n\nexport {\n  UnJSWorkflowIntegration,\n  createUnJSIntegration,\n  setupUnJSIntegration,\n  createIntegrationCommand\n} from './workflow-integration'\n\n/**\n * Unified integration orchestrator\n */\nexport class EcosystemIntegration {\n  private integrations = new Map<string, any>()\n  \n  constructor() {\n    this.setupDefaultIntegrations()\n  }\n  \n  private setupDefaultIntegrations() {\n    // Register default integrations\n    this.integrations.set('nuxt', () => import('./nuxt-module'))\n    this.integrations.set('nitro', () => import('./nitro-plugin'))\n    this.integrations.set('vite', () => import('./vite-plugin'))\n    this.integrations.set('h3', () => import('./h3-middleware'))\n    this.integrations.set('testing', () => import('./testing-utilities'))\n    this.integrations.set('dev-server', () => import('./dev-server'))\n    this.integrations.set('plugins', () => import('./plugin-architecture'))\n    this.integrations.set('workflow', () => import('./workflow-integration'))\n  }\n  \n  /**\n   * Get integration by name\n   */\n  async getIntegration(name: string): Promise<any> {\n    const loader = this.integrations.get(name)\n    if (!loader) {\n      throw new Error(`Integration '${name}' not found`)\n    }\n    \n    return await loader()\n  }\n  \n  /**\n   * List available integrations\n   */\n  getAvailableIntegrations(): string[] {\n    return Array.from(this.integrations.keys())\n  }\n  \n  /**\n   * Auto-setup for detected environment\n   */\n  async autoSetup(options: {\n    projectRoot?: string\n    detectOnly?: boolean\n    verbose?: boolean\n  } = {}): Promise<{\n    detected: string[]\n    configured: string[]\n    errors: string[]\n  }> {\n    const { projectRoot = process.cwd(), detectOnly = false, verbose = false } = options\n    \n    const detected: string[] = []\n    const configured: string[] = []\n    const errors: string[] = []\n    \n    try {\n      // Use workflow integration to detect toolchain\n      const { createUnJSIntegration } = await import('./workflow-integration')\n      const integration = createUnJSIntegration(projectRoot)\n      \n      const result = await integration.integrate()\n      \n      // Process detected tools\n      Object.entries(result.toolchain).forEach(([tool, info]) => {\n        if (typeof info === 'object' && info?.detected) {\n          detected.push(tool)\n          \n          if (!detectOnly) {\n            // Auto-configure would happen here\n            configured.push(tool)\n          }\n        }\n      })\n      \n      errors.push(...result.errors)\n      \n      if (verbose) {\n        console.log('üîç Detected integrations:', detected.join(', '))\n        if (!detectOnly) {\n          console.log('‚öôÔ∏è  Configured integrations:', configured.join(', '))\n        }\n        if (errors.length > 0) {\n          console.log('‚ùå Errors:', errors.length)\n        }\n      }\n      \n    } catch (error) {\n      errors.push(`Auto-setup failed: ${error instanceof Error ? error.message : error}`)\n    }\n    \n    return { detected, configured, errors }\n  }\n}\n\n/**\n * Global ecosystem integration instance\n */\nexport const ecosystemIntegration = new EcosystemIntegration()\n\n/**\n * Quick setup function for common use cases\n */\nexport async function quickSetup(framework?: 'nuxt' | 'nitro' | 'vite' | 'auto') {\n  if (framework === 'auto' || !framework) {\n    return ecosystemIntegration.autoSetup({ verbose: true })\n  }\n  \n  const integration = await ecosystemIntegration.getIntegration(framework)\n  \n  // Framework-specific quick setup\n  switch (framework) {\n    case 'nuxt':\n      console.log('üöÄ Setting up Nuxt integration...')\n      return integration.UnjucksNuxtModule\n      \n    case 'nitro':\n      console.log('‚ö° Setting up Nitro integration...')\n      return integration.unjucksNitroPlugin\n      \n    case 'vite':\n      console.log('‚ö° Setting up Vite integration...')\n      return integration.unjucksVite\n      \n    default:\n      throw new Error(`Unknown framework: ${framework}`)\n  }\n}\n\n/**\n * Helper for testing setup\n */\nexport async function setupTesting() {\n  const testing = await ecosystemIntegration.getIntegration('testing')\n  return testing.setupTestEnvironment()\n}\n\n/**\n * Helper for development server setup\n */\nexport async function setupDevServer(options?: any) {\n  const devServer = await ecosystemIntegration.getIntegration('dev-server')\n  return devServer.startDevServer(options)\n}\n\n/**\n * Integration status check\n */\nexport async function checkIntegrationStatus(projectRoot = process.cwd()) {\n  try {\n    const result = await ecosystemIntegration.autoSetup({ \n      projectRoot, \n      detectOnly: true, \n      verbose: false \n    })\n    \n    return {\n      available: ecosystemIntegration.getAvailableIntegrations(),\n      detected: result.detected,\n      status: result.errors.length === 0 ? 'healthy' : 'issues',\n      errors: result.errors\n    }\n  } catch (error) {\n    return {\n      available: [],\n      detected: [],\n      status: 'error',\n      errors: [error instanceof Error ? error.message : String(error)]\n    }\n  }\n}\n\n/**\n * CLI integration helper\n */\nexport function createIntegrationCLI() {\n  return {\n    meta: {\n      name: 'integration',\n      description: 'Ecosystem integration management'\n    },\n    subCommands: {\n      status: {\n        meta: {\n          description: 'Check integration status'\n        },\n        async run() {\n          const status = await checkIntegrationStatus()\n          console.log('üìä Integration Status:')\n          console.log(`Available: ${status.available.join(', ')}`)\n          console.log(`Detected: ${status.detected.join(', ')}`)\n          console.log(`Status: ${status.status}`)\n          if (status.errors.length > 0) {\n            console.log('Errors:', status.errors)\n          }\n        }\n      },\n      \n      setup: {\n        meta: {\n          description: 'Auto-setup integrations'\n        },\n        args: {\n          framework: {\n            type: 'string',\n            description: 'Specific framework to setup (nuxt, nitro, vite, auto)',\n            default: 'auto'\n          }\n        },\n        async run({ args }) {\n          await quickSetup(args.framework as any)\n        }\n      },\n      \n      dev: {\n        meta: {\n          description: 'Start development server'\n        },\n        args: {\n          port: { type: 'string', default: '3000' },\n          host: { type: 'string', default: 'localhost' }\n        },\n        async run({ args }) {\n          await setupDevServer({\n            port: parseInt(args.port),\n            host: args.host\n          })\n        }\n      }\n    }\n  }\n}\n\n// Type exports for better DX\nexport type {\n  UnjucksNuxtOptions,\n  UnjucksNitroOptions,\n  UnjucksViteOptions,\n  H3MiddlewareOptions,\n  DevServerOptions,\n  TestConfig,\n  TemplateTestCase,\n  PluginMetadata,\n  PluginOptions,\n  PluginHooks,\n  PluginContext,\n  UnJSToolchain,\n  IntegrationOptions,\n  BridgeOptions,\n  GenerationResult as BridgeGenerationResult,\n  GenerationContext\n} from './types'\n\n/**\n * Version information\n */\nexport const INTEGRATION_VERSION = '1.0.0'\nexport const SUPPORTED_FRAMEWORKS = ['nuxt', 'nitro', 'vite', 'h3'] as const\nexport const SUPPORTED_TOOLS = ['vitest', 'unbuild', 'unocss', 'pathe', 'defu', 'ofetch'] as const"