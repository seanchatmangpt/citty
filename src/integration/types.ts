/**\n * ðŸ”§ Integration Types: Comprehensive TypeScript Definitions\n * Shared types and interfaces for all ecosystem integrations\n * Ensures type safety across the entire integration layer\n */\n\n// Re-export from individual modules for convenience\nexport type {\n  UnjucksNuxtOptions\n} from './nuxt-module'\n\nexport type {\n  UnjucksNitroOptions,\n  CompiledTemplate\n} from './nitro-plugin'\n\nexport type {\n  H3MiddlewareOptions,\n  ContextExtractor,\n  ResponseTransformer\n} from './h3-middleware'\n\nexport type {\n  UnjucksViteOptions,\n  GeneratedFile\n} from './vite-plugin'\n\nexport type {\n  TestConfig,\n  TemplateTestCase\n} from './testing-utilities'\n\nexport type {\n  DevServerOptions\n} from './dev-server'\n\nexport type {\n  PluginMetadata,\n  PluginOptions,\n  PluginHooks,\n  PluginContext,\n  PluginLogger,\n  PluginUtils,\n  Plugin,\n  PluginManagerOptions\n} from './plugin-architecture'\n\nexport type {\n  UnJSToolchain,\n  IntegrationOptions\n} from './workflow-integration'\n\nexport type {\n  BridgeOptions,\n  GenerationContext,\n  GenerationResult\n} from './untology-unjucks-bridge'\n\n/**\n * Common shared types\n */\nexport interface BaseIntegrationOptions {\n  /**\n   * Templates directory\n   * @default './templates'\n   */\n  templatesDir?: string\n  \n  /**\n   * Ontology directory\n   * @default './ontology'\n   */\n  ontologyDir?: string\n  \n  /**\n   * Enable development mode features\n   */\n  development?: boolean\n  \n  /**\n   * Global context for all templates\n   */\n  globalContext?: Record<string, any>\n}\n\nexport interface IntegrationResult {\n  success: boolean\n  message: string\n  errors?: Error[]\n  warnings?: string[]\n  duration?: number\n}\n\nexport interface FrameworkDetection {\n  name: string\n  detected: boolean\n  version?: string\n  configPath?: string\n  config?: any\n}\n\nexport interface EcosystemStatus {\n  frameworks: FrameworkDetection[]\n  tools: FrameworkDetection[]\n  packageManager: 'npm' | 'yarn' | 'pnpm' | 'bun'\n  hasTypeScript: boolean\n  hasTemplates: boolean\n  hasOntology: boolean\n}\n\n/**\n * Template system types\n */\nexport interface TemplateDefinition {\n  id: string\n  name: string\n  description?: string\n  path: string\n  generator: string\n  action: string\n  frontMatter: Record<string, any>\n  dependencies?: string[]\n  tags?: string[]\n}\n\nexport interface TemplateRenderOptions {\n  context?: Record<string, any>\n  outputPath?: string\n  format?: 'html' | 'json' | 'xml' | 'text'\n  cache?: boolean\n  streaming?: boolean\n}\n\nexport interface TemplateRenderResult {\n  content: string\n  metadata: {\n    templateId: string\n    renderTime: number\n    fromCache: boolean\n    format: string\n  }\n}\n\n/**\n * Ontology integration types\n */\nexport interface OntologyInfo {\n  source: string\n  format: 'turtle' | 'json-ld' | 'n3' | 'rdf-xml'\n  entities: number\n  loaded: boolean\n  lastModified?: Date\n}\n\nexport interface OntologyContext {\n  entities: any[]\n  relationships: any[]\n  metadata: Record<string, any>\n  statistics: {\n    entityCount: number\n    relationshipCount: number\n    namespaces: string[]\n  }\n}\n\n/**\n * Development server types\n */\nexport interface DevServerInfo {\n  port: number\n  host: string\n  running: boolean\n  uptime?: number\n  endpoints: string[]\n  features: {\n    hotReload: boolean\n    previewUI: boolean\n    websocket: boolean\n    cors: boolean\n  }\n}\n\nexport interface WebSocketMessage {\n  type: string\n  data?: any\n  timestamp: number\n  clientId?: string\n}\n\n/**\n * Testing types\n */\nexport interface TestSuiteResult {\n  name: string\n  passed: number\n  failed: number\n  duration: number\n  results: TestCaseResult[]\n}\n\nexport interface TestCaseResult {\n  name: string\n  status: 'passed' | 'failed' | 'skipped'\n  duration: number\n  error?: Error\n  output?: any\n}\n\nexport interface MockData {\n  type: 'ontology' | 'template' | 'context'\n  content: any\n  metadata?: Record<string, any>\n}\n\n/**\n * Plugin system types\n */\nexport interface PluginRegistry {\n  [name: string]: Plugin\n}\n\nexport interface HookExecution {\n  hookName: string\n  pluginName: string\n  success: boolean\n  duration: number\n  result?: any\n  error?: Error\n}\n\nexport interface PluginEvent {\n  type: 'registered' | 'loaded' | 'instantiated' | 'executed' | 'error'\n  plugin: string\n  data?: any\n  timestamp: number\n}\n\n/**\n * Build and bundling types\n */\nexport interface BuildTarget {\n  name: string\n  format: 'esm' | 'cjs' | 'umd' | 'iife'\n  platform: 'browser' | 'node' | 'neutral'\n  minify?: boolean\n  sourcemap?: boolean\n}\n\nexport interface BuildResult {\n  success: boolean\n  targets: BuildTarget[]\n  outputFiles: string[]\n  duration: number\n  size: {\n    original: number\n    compressed: number\n  }\n  warnings?: string[]\n  errors?: Error[]\n}\n\n/**\n * Configuration management types\n */\nexport interface ConfigFile {\n  path: string\n  exists: boolean\n  format: 'json' | 'js' | 'ts' | 'yaml'\n  content?: any\n  valid: boolean\n  errors?: string[]\n}\n\nexport interface ProjectConfig {\n  root: string\n  packageJson: ConfigFile\n  tsconfig: ConfigFile\n  configs: {\n    nuxt?: ConfigFile\n    nitro?: ConfigFile\n    vite?: ConfigFile\n    vitest?: ConfigFile\n    unbuild?: ConfigFile\n  }\n  unjucks: {\n    templates: boolean\n    ontology: boolean\n    config?: any\n  }\n}\n\n/**\n * Performance and monitoring types\n */\nexport interface PerformanceMetrics {\n  templateGeneration: {\n    average: number\n    min: number\n    max: number\n    count: number\n  }\n  ontologyLoading: {\n    duration: number\n    entities: number\n    size: number\n  }\n  memoryUsage: {\n    heap: number\n    external: number\n    rss: number\n  }\n  cacheStats: {\n    hits: number\n    misses: number\n    size: number\n  }\n}\n\nexport interface HealthCheck {\n  service: string\n  status: 'healthy' | 'degraded' | 'unhealthy'\n  message?: string\n  lastCheck: Date\n  uptime: number\n}\n\n/**\n * Error handling types\n */\nexport interface IntegrationError extends Error {\n  code: string\n  integration: string\n  context?: Record<string, any>\n  recoverable: boolean\n}\n\nexport interface ErrorContext {\n  operation: string\n  integration: string\n  timestamp: Date\n  stack?: string\n  metadata?: Record<string, any>\n}\n\n/**\n * Utility types for better developer experience\n */\nexport type IntegrationType = 'nuxt' | 'nitro' | 'vite' | 'h3' | 'vitest' | 'unbuild'\nexport type TemplateFormat = 'njk' | 'nunjucks' | 'j2' | 'jinja2'\nexport type OntologyFormat = 'turtle' | 'json-ld' | 'n3' | 'rdf-xml'\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error'\nexport type Environment = 'development' | 'test' | 'production'\n\n/**\n * Generic utility types\n */\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P]\n}\n\nexport type RequireAtLeastOne<T, Keys extends keyof T = keyof T> =\n  Pick<T, Exclude<keyof T, Keys>>\n  & {\n    [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n  }[Keys]\n\nexport type Awaitable<T> = T | Promise<T>\n\nexport type MaybeArray<T> = T | T[]\n\nexport type StringKeyOf<T> = Extract<keyof T, string>\n\n/**\n * Event system types\n */\nexport interface EventMap {\n  'integration:start': { integration: string; options: any }\n  'integration:complete': { integration: string; result: IntegrationResult }\n  'integration:error': { integration: string; error: Error }\n  'template:render': { templateId: string; context: any; result: TemplateRenderResult }\n  'ontology:load': { source: string; info: OntologyInfo }\n  'plugin:hook': { hookName: string; plugin: string; result: any }\n  'dev:server:start': { server: DevServerInfo }\n  'dev:file:change': { path: string; type: 'template' | 'ontology' | 'config' }\n  'build:start': { target: string }\n  'build:complete': { target: string; result: BuildResult }\n  'test:start': { suite: string }\n  'test:complete': { suite: string; result: TestSuiteResult }\n}\n\nexport type EventHandler<T extends keyof EventMap> = (event: EventMap[T]) => void | Promise<void>\n\n/**\n * Configuration validation types\n */\nexport interface ValidationRule {\n  field: string\n  type: 'string' | 'number' | 'boolean' | 'array' | 'object'\n  required?: boolean\n  default?: any\n  validator?: (value: any) => boolean | string\n}\n\nexport interface ValidationResult {\n  valid: boolean\n  errors: Array<{\n    field: string\n    message: string\n    value?: any\n  }>\n  warnings: Array<{\n    field: string\n    message: string\n    value?: any\n  }>\n}\n\n/**\n * Future extensibility types\n */\nexport interface ExtensionPoint {\n  name: string\n  description: string\n  type: 'hook' | 'middleware' | 'transformer' | 'validator'\n  parameters?: ValidationRule[]\n  examples?: any[]\n}\n\nexport interface Extension {\n  name: string\n  version: string\n  author?: string\n  description?: string\n  extensionPoints: ExtensionPoint[]\n  dependencies?: string[]\n  config?: Record<string, any>\n}"