/**\n * UnJS ecosystem integration hints and detection\n */\nimport { consola } from 'consola';\nimport colors from 'picocolors';\nimport { existsSync, readFileSync } from 'node:fs';\nimport { resolve } from 'pathe';\n\nexport interface EcosystemTool {\n  name: string;\n  packageName: string;\n  configFiles: string[];\n  description: string;\n  integrationHints: string[];\n  detectionMethod: () => boolean | Promise<boolean>;\n  setupInstructions: string[];\n}\n\nexport class EcosystemIntegration {\n  private tools: EcosystemTool[] = [\n    {\n      name: 'Nuxt',\n      packageName: 'nuxt',\n      configFiles: ['nuxt.config.ts', 'nuxt.config.js', 'nuxt.config.mjs'],\n      description: 'The Intuitive Vue Framework',\n      integrationHints: [\n        'Generate Nuxt components with: unjucks nuxt-component create',\n        'Create pages: unjucks nuxt-page create',\n        'Generate composables: unjucks nuxt-composable create',\n        'Add middleware: unjucks nuxt-middleware create'\n      ],\n      detectionMethod: () => this.hasPackage('nuxt') || this.hasAnyFile(['nuxt.config.ts', 'nuxt.config.js', 'nuxt.config.mjs']),\n      setupInstructions: [\n        'Install Nuxt integration: pnpm add -D @unjucks/nuxt-module',\n        'Add to nuxt.config.ts: modules: [\"@unjucks/nuxt-module\"]',\n        'Use built-in generators: unjucks nuxt-* create'\n      ]\n    },\n    {\n      name: 'Nitro',\n      packageName: 'nitro',\n      configFiles: ['nitro.config.ts', 'nitro.config.js'],\n      description: 'Create, build and deploy universal web servers',\n      integrationHints: [\n        'Generate API routes: unjucks nitro-api create',\n        'Create middleware: unjucks nitro-middleware create',\n        'Add utilities: unjucks nitro-util create',\n        'Generate plugins: unjucks nitro-plugin create'\n      ],\n      detectionMethod: () => this.hasPackage('nitro') || this.hasAnyFile(['nitro.config.ts', 'nitro.config.js']),\n      setupInstructions: [\n        'Install Nitro integration: pnpm add -D @unjucks/nitro-plugin',\n        'Add to nitro.config.ts: plugins: [\"@unjucks/nitro-plugin\"]',\n        'Use built-in generators: unjucks nitro-* create'\n      ]\n    },\n    {\n      name: 'UnJS',\n      packageName: 'unbuild',\n      configFiles: ['build.config.ts', 'build.config.js'],\n      description: 'Universal JavaScript tools',\n      integrationHints: [\n        'Create UnJS packages: unjucks unjs-package create',\n        'Generate utilities: unjucks unjs-util create',\n        'Add composables: unjucks unjs-composable create',\n        'Create CLI tools: unjucks unjs-cli create'\n      ],\n      detectionMethod: () => this.hasPackage('unbuild') || this.hasAnyFile(['build.config.ts', 'build.config.js']),\n      setupInstructions: [\n        'Initialize UnJS project structure',\n        'Use TypeScript with proper exports',\n        'Follow UnJS naming conventions'\n      ]\n    },\n    {\n      name: 'Vite',\n      packageName: 'vite',\n      configFiles: ['vite.config.ts', 'vite.config.js'],\n      description: 'Next generation frontend tooling',\n      integrationHints: [\n        'Generate Vite plugins: unjucks vite-plugin create',\n        'Create build configs: unjucks vite-config create',\n        'Add dev tools: unjucks vite-devtool create'\n      ],\n      detectionMethod: () => this.hasPackage('vite') || this.hasAnyFile(['vite.config.ts', 'vite.config.js']),\n      setupInstructions: [\n        'Install Vite integration: pnpm add -D @unjucks/vite-plugin',\n        'Add to vite.config.ts: plugins: [unjucks()]',\n        'Configure template paths in plugin options'\n      ]\n    },\n    {\n      name: 'Rollup',\n      packageName: 'rollup',\n      configFiles: ['rollup.config.ts', 'rollup.config.js'],\n      description: 'ES module bundler',\n      integrationHints: [\n        'Generate Rollup plugins: unjucks rollup-plugin create',\n        'Create build configurations: unjucks rollup-config create'\n      ],\n      detectionMethod: () => this.hasPackage('rollup') || this.hasAnyFile(['rollup.config.ts', 'rollup.config.js']),\n      setupInstructions: [\n        'Use with rollup-plugin-typescript2',\n        'Configure proper output formats',\n        'Consider tree-shaking optimization'\n      ]\n    },\n    {\n      name: 'ESLint',\n      packageName: 'eslint',\n      configFiles: ['.eslintrc.js', '.eslintrc.json', 'eslint.config.js'],\n      description: 'Pluggable JavaScript linter',\n      integrationHints: [\n        'Generate ESLint configs: unjucks eslint-config create',\n        'Create custom rules: unjucks eslint-rule create',\n        'Add plugin configurations: unjucks eslint-plugin create'\n      ],\n      detectionMethod: () => this.hasPackage('eslint') || this.hasAnyFile(['.eslintrc.js', '.eslintrc.json', 'eslint.config.js']),\n      setupInstructions: [\n        'Configure ESLint to ignore generated files',\n        'Add prettier integration for formatting',\n        'Use @antfu/eslint-config for UnJS projects'\n      ]\n    },\n    {\n      name: 'TypeScript',\n      packageName: 'typescript',\n      configFiles: ['tsconfig.json'],\n      description: 'Typed JavaScript at scale',\n      integrationHints: [\n        'Generate TypeScript types: unjucks typescript-types create',\n        'Create declaration files: unjucks typescript-dts create',\n        'Add strict type definitions: unjucks typescript-strict create'\n      ],\n      detectionMethod: () => this.hasPackage('typescript') || this.hasAnyFile(['tsconfig.json']),\n      setupInstructions: [\n        'Enable strict mode in tsconfig.json',\n        'Use proper path mapping',\n        'Configure declaration output'\n      ]\n    },\n    {\n      name: 'Vitest',\n      packageName: 'vitest',\n      configFiles: ['vitest.config.ts', 'vitest.config.js'],\n      description: 'Blazing fast unit test framework',\n      integrationHints: [\n        'Generate test files: unjucks vitest-test create',\n        'Create test utilities: unjucks vitest-util create',\n        'Add coverage configs: unjucks vitest-coverage create'\n      ],\n      detectionMethod: () => this.hasPackage('vitest') || this.hasAnyFile(['vitest.config.ts', 'vitest.config.js']),\n      setupInstructions: [\n        'Configure test environment in vitest.config.ts',\n        'Use @vitest/ui for browser testing',\n        'Set up coverage thresholds'\n      ]\n    }\n  ];\n\n  /**\n   * Detect which ecosystem tools are present in the project\n   */\n  async detectTools(): Promise<EcosystemTool[]> {\n    const detectedTools: EcosystemTool[] = [];\n    \n    for (const tool of this.tools) {\n      try {\n        const isDetected = await tool.detectionMethod();\n        if (isDetected) {\n          detectedTools.push(tool);\n        }\n      } catch (error) {\n        // Ignore detection errors\n      }\n    }\n    \n    return detectedTools;\n  }\n\n  /**\n   * Show ecosystem integration status and hints\n   */\n  async showEcosystemStatus(): Promise<void> {\n    const detectedTools = await this.detectTools();\n    \n    console.log('');\n    console.log(colors.bold('ðŸ”— UnJS Ecosystem Integration'));\n    console.log('');\n    \n    if (detectedTools.length === 0) {\n      console.log(colors.dim('No ecosystem tools detected in this project.'));\n      console.log('');\n      console.log(colors.dim('Popular UnJS tools to consider:'));\n      this.tools.slice(0, 3).forEach(tool => {\n        console.log(colors.dim(`  â€¢ ${tool.name} - ${tool.description}`));\n      });\n    } else {\n      console.log(colors.green('âœ¨ Detected ecosystem tools:'));\n      detectedTools.forEach(tool => {\n        console.log(`${colors.green('âœ“')} ${colors.bold(tool.name)} - ${colors.dim(tool.description)}`);\n      });\n      \n      console.log('');\n      console.log(colors.blue('ðŸ’¡ Integration hints:'));\n      detectedTools.forEach(tool => {\n        if (tool.integrationHints.length > 0) {\n          console.log(colors.bold(`  ${tool.name}:`));\n          tool.integrationHints.forEach(hint => {\n            console.log(colors.dim(`    â€¢ ${hint}`));\n          });\n        }\n      });\n    }\n    \n    console.log('');\n  }\n\n  /**\n   * Get tool-specific template suggestions\n   */\n  getToolSuggestions(detectedTools: EcosystemTool[]): Array<{generator: string, action: string, description: string}> {\n    const suggestions: Array<{generator: string, action: string, description: string}> = [];\n    \n    for (const tool of detectedTools) {\n      const toolName = tool.name.toLowerCase();\n      \n      // Generate tool-specific suggestions\n      switch (toolName) {\n        case 'nuxt':\n          suggestions.push(\n            { generator: 'nuxt-component', action: 'create', description: 'Create Vue component for Nuxt' },\n            { generator: 'nuxt-page', action: 'create', description: 'Generate Nuxt page with routing' },\n            { generator: 'nuxt-composable', action: 'create', description: 'Create reusable Nuxt composable' }\n          );\n          break;\n          \n        case 'nitro':\n          suggestions.push(\n            { generator: 'nitro-api', action: 'create', description: 'Create API route handler' },\n            { generator: 'nitro-middleware', action: 'create', description: 'Generate request middleware' }\n          );\n          break;\n          \n        case 'vite':\n          suggestions.push(\n            { generator: 'vite-plugin', action: 'create', description: 'Create custom Vite plugin' },\n            { generator: 'vite-config', action: 'create', description: 'Generate Vite configuration' }\n          );\n          break;\n      }\n    }\n    \n    return suggestions;\n  }\n\n  /**\n   * Check if package is installed\n   */\n  private hasPackage(packageName: string): boolean {\n    try {\n      const packageJson = this.readPackageJson();\n      if (!packageJson) return false;\n      \n      return !!(packageJson.dependencies?.[packageName] || \n               packageJson.devDependencies?.[packageName] ||\n               packageJson.peerDependencies?.[packageName]);\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Check if any of the config files exist\n   */\n  private hasAnyFile(files: string[]): boolean {\n    return files.some(file => existsSync(resolve(file)));\n  }\n\n  /**\n   * Read and parse package.json\n   */\n  private readPackageJson(): any {\n    try {\n      const packagePath = resolve('package.json');\n      if (!existsSync(packagePath)) return null;\n      \n      const content = readFileSync(packagePath, 'utf-8');\n      return JSON.parse(content);\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Show setup instructions for detected tools\n   */\n  async showSetupInstructions(): Promise<void> {\n    const detectedTools = await this.detectTools();\n    \n    if (detectedTools.length === 0) return;\n    \n    console.log(colors.bold('ðŸš€ Setup Instructions:'));\n    console.log('');\n    \n    detectedTools.forEach(tool => {\n      if (tool.setupInstructions.length > 0) {\n        console.log(colors.bold(`${tool.name}:`));\n        tool.setupInstructions.forEach((instruction, index) => {\n          console.log(colors.dim(`  ${index + 1}. ${instruction}`));\n        });\n        console.log('');\n      }\n    });\n  }\n\n  /**\n   * Show relevant documentation links\n   */\n  showDocumentationLinks(): void {\n    console.log(colors.bold('ðŸ“š Documentation & Resources:'));\n    console.log('');\n    \n    const links = [\n      { name: 'UnJS Organization', url: 'https://unjs.io' },\n      { name: 'Nuxt Documentation', url: 'https://nuxt.com/docs' },\n      { name: 'Nitro Documentation', url: 'https://nitro.unjs.io' },\n      { name: 'Vite Documentation', url: 'https://vitejs.dev' },\n      { name: 'Unjucks Templates', url: 'https://unjucks.unjs.io/templates' },\n      { name: 'Community Discord', url: 'https://discord.unjs.io' }\n    ];\n    \n    links.forEach(link => {\n      console.log(colors.dim(`  â€¢ ${link.name}: `) + colors.cyan(link.url));\n    });\n    \n    console.log('');\n  }\n\n  /**\n   * Generate integration-specific context\n   */\n  async generateIntegrationContext(): Promise<Record<string, any>> {\n    const detectedTools = await this.detectTools();\n    const packageJson = this.readPackageJson();\n    \n    return {\n      ecosystem: {\n        detectedTools: detectedTools.map(t => t.name),\n        hasPackageJson: !!packageJson,\n        packageName: packageJson?.name,\n        isUnJSProject: packageJson?.name?.startsWith('@unjs/') || \n                      packageJson?.author?.includes('UnJS') ||\n                      Object.keys(packageJson?.dependencies || {}).some(dep => dep.startsWith('@unjs/')),\n        nodeVersion: process.version,\n        platform: process.platform\n      },\n      integrations: detectedTools.reduce((acc, tool) => {\n        acc[tool.name.toLowerCase()] = {\n          detected: true,\n          packageName: tool.packageName,\n          configFiles: tool.configFiles.filter(file => existsSync(resolve(file)))\n        };\n        return acc;\n      }, {} as Record<string, any>)\n    };\n  }\n}\n