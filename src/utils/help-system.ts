/**\n * Enhanced help system with examples, tips, and interactive guidance\n */\nimport { consola } from 'consola';\nimport colors from 'picocolors';\nimport type { CommandDef, ArgsDef } from '../types.js';\nimport { EcosystemIntegration } from './ecosystem-integration.js';\n\nexport interface HelpExample {\n  title: string;\n  description: string;\n  command: string;\n  output?: string;\n  notes?: string[];\n}\n\nexport interface HelpTip {\n  category: string;\n  title: string;\n  description: string;\n  example?: string;\n}\n\nexport class HelpSystem {\n  private ecosystem = new EcosystemIntegration();\n  \n  private examples: HelpExample[] = [\n    {\n      title: 'Quick Start',\n      description: 'Initialize a new project with sample templates',\n      command: 'unjucks init',\n      notes: [\n        'Creates sample generators, ontology, and context files',\n        'Sets up .gitignore and configuration',\n        'Provides ready-to-use examples'\n      ]\n    },\n    {\n      title: 'List Available Templates',\n      description: 'See all generators and actions in your project',\n      command: 'unjucks --list',\n      output: `üìÅ component\n  ‚ñ∂ create\n  ‚ñ∂ update\n\nüìÅ api\n  ‚ñ∂ generate\n  ‚ñ∂ scaffold`\n    },\n    {\n      title: 'Interactive Generation',\n      description: 'Generate templates with guided prompts',\n      command: 'unjucks --interactive',\n      notes: [\n        'Walks you through generator and action selection',\n        'Prompts for missing context variables',\n        'Perfect for beginners or complex templates'\n      ]\n    },\n    {\n      title: 'Generate Component',\n      description: 'Create a React component with context',\n      command: 'unjucks component create --output ./src/components/Button.tsx --context button.json',\n      notes: [\n        'Uses component generator with create action',\n        'Outputs to specific file path',\n        'Loads context from JSON file'\n      ]\n    },\n    {\n      title: 'Dry Run Preview',\n      description: 'Preview output without creating files',\n      command: 'unjucks api generate --dry-run --verbose',\n      notes: [\n        'Safe way to test templates',\n        'Shows exact output that would be generated',\n        'Verbose mode shows template resolution process'\n      ]\n    },\n    {\n      title: 'Using Ontology',\n      description: 'Generate with semantic context from ontology',\n      command: 'unjucks service create --ontology ./domain.json --interactive',\n      notes: [\n        'Loads semantic definitions from ontology file',\n        'Expands context with related entities',\n        'Enables intelligent template generation'\n      ]\n    },\n    {\n      title: 'Diff Mode',\n      description: 'See changes before overwriting existing files',\n      command: 'unjucks component update --output existing-file.tsx --diff',\n      notes: [\n        'Shows differences between existing and new content',\n        'Prevents accidental overwrites',\n        'Useful for updating existing code'\n      ]\n    },\n    {\n      title: 'Context from YAML',\n      description: 'Use YAML files for more readable context',\n      command: 'unjucks page create --context page-config.yaml --output pages/about.vue',\n      notes: [\n        'YAML context files are more human-readable',\n        'Supports both JSON and YAML formats',\n        'Great for complex nested data structures'\n      ]\n    },\n    {\n      title: 'Custom Template Directory',\n      description: 'Use templates from a different directory',\n      command: 'unjucks component create --template-dir ./custom-templates',\n      notes: [\n        'Override default templates directory',\n        'Useful for project-specific templates',\n        'Can be combined with other options'\n      ]\n    },\n    {\n      title: 'Validation',\n      description: 'Validate your templates and ontology',\n      command: 'unjucks validate --ontology domain.json',\n      notes: [\n        'Checks template syntax and structure',\n        'Validates ontology format and schema',\n        'Helps catch errors before generation'\n      ]\n    }\n  ];\n\n  private tips: HelpTip[] = [\n    {\n      category: 'Getting Started',\n      title: 'Initialize Before First Use',\n      description: 'Always run `unjucks init` in new projects to create sample templates and configuration files.',\n      example: 'unjucks init && unjucks --list'\n    },\n    {\n      category: 'Templates',\n      title: 'Use Descriptive Generator Names',\n      description: 'Name your generators based on what they create (component, api, page) rather than generic names.',\n      example: 'templates/react-component/create.njk (good) vs templates/gen1/action1.njk (bad)'\n    },\n    {\n      category: 'Context',\n      title: 'JSON vs YAML Context Files',\n      description: 'Use JSON for simple data, YAML for complex nested structures and better readability.',\n      example: 'button.yaml is more readable than button.json for component props'\n    },\n    {\n      category: 'Safety',\n      title: 'Always Dry Run First',\n      description: 'Use --dry-run to preview output before generating files, especially with new templates.',\n      example: 'unjucks component create --dry-run --verbose'\n    },\n    {\n      category: 'Debugging',\n      title: 'Enable Verbose Mode',\n      description: 'Use --verbose to see template resolution, context loading, and performance metrics.',\n      example: 'unjucks --verbose component create shows detailed execution info'\n    },\n    {\n      category: 'Organization',\n      title: 'Structure Your Templates',\n      description: 'Organize templates by type: components/, api/, pages/, utils/ for better maintainability.',\n      example: 'templates/components/react/create.njk, templates/api/rest/generate.njk'\n    },\n    {\n      category: 'Ecosystem',\n      title: 'Leverage UnJS Tools',\n      description: 'Unjucks integrates seamlessly with Nuxt, Nitro, Vite, and other UnJS tools.',\n      example: 'Use nuxt-specific generators in Nuxt projects for better integration'\n    },\n    {\n      category: 'Performance',\n      title: 'Use Ontologies for Complex Domains',\n      description: 'Ontologies help manage complex relationships and enable intelligent context expansion.',\n      example: 'Define user-profile-order relationships in ontology for e-commerce templates'\n    },\n    {\n      category: 'Workflow',\n      title: 'Combine with Git Hooks',\n      description: 'Use unjucks in git hooks for automatic code generation on branch changes.',\n      example: 'Generate API types automatically when schema files change'\n    },\n    {\n      category: 'Testing',\n      title: 'Validate Before Committing',\n      description: 'Add template validation to your CI/CD pipeline to catch issues early.',\n      example: 'unjucks validate --template-dir templates/ in package.json scripts'\n    }\n  ];\n\n  /**\n   * Show comprehensive help with examples and tips\n   */\n  async showEnhancedHelp(cmd?: CommandDef): Promise<void> {\n    console.log('');\n    console.log(colors.bold(colors.blue('üöÄ Unjucks - Universal Template System')));\n    console.log('');\n    console.log(colors.dim('Build powerful templates with intelligent context management and semantic understanding.'));\n    console.log('');\n    \n    // Show ecosystem integration status\n    await this.ecosystem.showEcosystemStatus();\n    \n    // Show examples\n    this.showExamples();\n    \n    // Show tips\n    this.showTips();\n    \n    // Show quick reference\n    this.showQuickReference();\n    \n    // Show additional resources\n    this.showResources();\n  }\n\n  /**\n   * Show usage examples\n   */\n  showExamples(limit: number = 5): void {\n    console.log(colors.bold('üìö Usage Examples:'));\n    console.log('');\n    \n    const examples = limit > 0 ? this.examples.slice(0, limit) : this.examples;\n    \n    examples.forEach((example, index) => {\n      console.log(colors.bold(`${index + 1}. ${example.title}`));\n      console.log(colors.dim(`   ${example.description}`));\n      console.log('');\n      console.log(colors.cyan(`   $ ${example.command}`));\n      \n      if (example.output) {\n        console.log('');\n        console.log(colors.dim('   Output:'));\n        example.output.split('\\n').forEach(line => {\n          console.log(colors.dim(`   ${line}`));\n        });\n      }\n      \n      if (example.notes) {\n        console.log('');\n        example.notes.forEach(note => {\n          console.log(colors.dim(`   üí° ${note}`));\n        });\n      }\n      \n      console.log('');\n    });\n  }\n\n  /**\n   * Show helpful tips\n   */\n  showTips(category?: string): void {\n    console.log(colors.bold('üí° Pro Tips:'));\n    console.log('');\n    \n    const filteredTips = category \n      ? this.tips.filter(tip => tip.category === category)\n      : this.tips;\n      \n    const categories = [...new Set(filteredTips.map(tip => tip.category))];\n    \n    categories.forEach(cat => {\n      const categoryTips = filteredTips.filter(tip => tip.category === cat);\n      \n      console.log(colors.bold(colors.yellow(`${cat}:`)));\n      \n      categoryTips.forEach(tip => {\n        console.log(`  ‚Ä¢ ${colors.green(tip.title)}: ${tip.description}`);\n        if (tip.example) {\n          console.log(colors.dim(`    Example: ${tip.example}`));\n        }\n      });\n      \n      console.log('');\n    });\n  }\n\n  /**\n   * Show quick reference guide\n   */\n  showQuickReference(): void {\n    console.log(colors.bold('‚ö° Quick Reference:'));\n    console.log('');\n    \n    const commands = [\n      { cmd: 'unjucks init', desc: 'Initialize project with samples' },\n      { cmd: 'unjucks --list', desc: 'List available templates' },\n      { cmd: 'unjucks --interactive', desc: 'Interactive mode' },\n      { cmd: 'unjucks [generator] [action]', desc: 'Generate from template' },\n      { cmd: 'unjucks validate', desc: 'Validate templates' },\n      { cmd: 'unjucks --help', desc: 'Show this help' }\n    ];\n    \n    commands.forEach(({ cmd, desc }) => {\n      console.log(`  ${colors.cyan(cmd.padEnd(30))} ${colors.dim(desc)}`);\n    });\n    \n    console.log('');\n    \n    console.log(colors.bold('üîß Common Options:'));\n    const options = [\n      { opt: '--dry-run, -d', desc: 'Preview without writing files' },\n      { opt: '--verbose, -v', desc: 'Detailed logging' },\n      { opt: '--output, -o', desc: 'Specify output file/directory' },\n      { opt: '--context, -c', desc: 'Load context from file' },\n      { opt: '--interactive, -i', desc: 'Interactive prompts' },\n      { opt: '--diff', desc: 'Show changes before overwrite' }\n    ];\n    \n    options.forEach(({ opt, desc }) => {\n      console.log(`  ${colors.cyan(opt.padEnd(20))} ${colors.dim(desc)}`);\n    });\n    \n    console.log('');\n  }\n\n  /**\n   * Show additional resources and documentation\n   */\n  showResources(): void {\n    console.log(colors.bold('üîó Resources & Documentation:'));\n    console.log('');\n    \n    const resources = [\n      { name: 'Documentation', url: 'https://unjucks.unjs.io' },\n      { name: 'Template Gallery', url: 'https://unjucks.unjs.io/templates' },\n      { name: 'GitHub Repository', url: 'https://github.com/unjs/unjucks' },\n      { name: 'UnJS Discord', url: 'https://discord.unjs.io' },\n      { name: 'Issue Tracker', url: 'https://github.com/unjs/unjucks/issues' },\n      { name: 'Contribution Guide', url: 'https://github.com/unjs/unjucks/blob/main/CONTRIBUTING.md' }\n    ];\n    \n    resources.forEach(({ name, url }) => {\n      console.log(`  ‚Ä¢ ${colors.green(name)}: ${colors.cyan(url)}`);\n    });\n    \n    console.log('');\n  }\n\n  /**\n   * Show context-sensitive help based on current project\n   */\n  async showContextualHelp(): Promise<void> {\n    const detectedTools = await this.ecosystem.detectTools();\n    \n    if (detectedTools.length > 0) {\n      console.log(colors.bold('üéØ Project-Specific Suggestions:'));\n      console.log('');\n      \n      const suggestions = this.ecosystem.getToolSuggestions(detectedTools);\n      \n      suggestions.forEach(suggestion => {\n        console.log(`  ‚Ä¢ ${colors.cyan(`unjucks ${suggestion.generator} ${suggestion.action}`)} - ${colors.dim(suggestion.description)}`);\n      });\n      \n      console.log('');\n    }\n    \n    // Show setup instructions for detected tools\n    await this.ecosystem.showSetupInstructions();\n  }\n\n  /**\n   * Interactive help mode - ask questions and provide targeted help\n   */\n  async interactiveHelp(): Promise<void> {\n    console.log('');\n    console.log(colors.bold(colors.blue('ü§ñ Interactive Help Mode')));\n    console.log('');\n    \n    const questions = [\n      'What would you like help with?',\n      '1. Getting started with templates',\n      '2. Understanding generators and actions', \n      '3. Working with context and ontology',\n      '4. Ecosystem integration',\n      '5. Troubleshooting common issues'\n    ];\n    \n    questions.forEach(q => console.log(colors.dim(q)));\n    \n    // In a full implementation, this would use readline to get user input\n    // and provide targeted help based on their selection\n    \n    console.log('');\n    console.log(colors.dim('For now, use specific help commands:'));\n    console.log(colors.cyan('  unjucks --examples    # Show usage examples'));\n    console.log(colors.cyan('  unjucks --tips        # Show pro tips'));\n    console.log(colors.cyan('  unjucks init          # Get started quickly'));\n    console.log('');\n  }\n\n  /**\n   * Show command-specific help with enhanced information\n   */\n  showCommandHelp(command: string): void {\n    const commandHelp = {\n      'init': {\n        description: 'Initialize unjucks with sample templates and configuration',\n        usage: 'unjucks init [options]',\n        options: [\n          '--force, -f    Overwrite existing files',\n        ],\n        examples: [\n          'unjucks init                  # Initialize with defaults',\n          'unjucks init --force          # Overwrite existing files'\n        ],\n        notes: [\n          'Creates templates/, ontology.json, context files, and .unjucks.json',\n          'Safe to run multiple times (won\\'t overwrite without --force)',\n          'Creates .gitignore entries for generated files'\n        ]\n      },\n      'validate': {\n        description: 'Validate templates and ontology files',\n        usage: 'unjucks validate [options]',\n        options: [\n          '--template-dir, -t    Template directory to validate',\n          '--ontology, -o        Ontology file to validate'\n        ],\n        examples: [\n          'unjucks validate                    # Validate all',\n          'unjucks validate --ontology ont.json # Validate specific ontology'\n        ],\n        notes: [\n          'Checks template syntax and structure',\n          'Validates ontology schema compliance',\n          'Reports any issues found'\n        ]\n      }\n    };\n    \n    const help = commandHelp[command as keyof typeof commandHelp];\n    \n    if (!help) {\n      console.log(colors.yellow(`No specific help available for command: ${command}`));\n      return;\n    }\n    \n    console.log('');\n    console.log(colors.bold(`üìñ Help for: ${colors.cyan(command)}`));\n    console.log('');\n    console.log(colors.dim(help.description));\n    console.log('');\n    \n    console.log(colors.bold('Usage:'));\n    console.log(`  ${colors.cyan(help.usage)}`);\n    console.log('');\n    \n    if (help.options.length > 0) {\n      console.log(colors.bold('Options:'));\n      help.options.forEach(option => {\n        console.log(`  ${colors.cyan(option)}`);\n      });\n      console.log('');\n    }\n    \n    if (help.examples.length > 0) {\n      console.log(colors.bold('Examples:'));\n      help.examples.forEach(example => {\n        console.log(`  ${colors.dim('$')} ${colors.cyan(example)}`);\n      });\n      console.log('');\n    }\n    \n    if (help.notes.length > 0) {\n      console.log(colors.bold('Notes:'));\n      help.notes.forEach(note => {\n        console.log(`  üí° ${colors.dim(note)}`);\n      });\n      console.log('');\n    }\n  }\n}\n
export { HelpSystem, type HelpExample, type HelpTip };
