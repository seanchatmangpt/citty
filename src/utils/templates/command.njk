import { defineCommand } from "citty";

export default defineCommand({
  meta: {
    name: "{{ command.name }}",
    {%- if command.description %}
    description: "{{ command.description }}",
    {%- endif %}
    {%- if command.version %}
    version: "{{ command.version }}",
    {%- endif %}
    {%- if command.hidden %}
    hidden: true,
    {%- endif %}
  },
  {%- if command.args and command.args.length > 0 %}
  args: {
    {%- for arg in command.args %}
    {{ arg.name }}: {
      type: "{{ arg.type }}",
      {%- if arg.description %}
      description: "{{ arg.description }}",
      {%- endif %}
      {%- if arg.default !== undefined %}
      default: {%- if arg.type == "string" %}"{{ arg.default }}"{%- else %}{{ arg.default }}{%- endif %},
      {%- endif %}
      {%- if arg.required %}
      required: true,
      {%- endif %}
      {%- if arg.alias %}
      alias: {%- if arg.alias.length == 1 %}"{{ arg.alias[0] }}"{%- else %}[{%- for alias in arg.alias %}"{{ alias }}"{%- if not loop.last %}, {%- endif %}{%- endfor %}]{%- endif %},
      {%- endif %}
      {%- if arg.valueHint %}
      valueHint: "{{ arg.valueHint }}",
      {%- endif %}
      {%- if arg.options and arg.options.length > 0 %}
      options: [{%- for option in arg.options %}"{{ option }}"{%- if not loop.last %}, {%- endif %}{%- endfor %}],
      {%- endif %}
    },
    {%- endfor %}
  },
  {%- endif %}
  {%- if command.subCommands and command.subCommands.length > 0 %}
  subCommands: {
    {%- for subCommand in command.subCommands %}
    {{ subCommand.name }}: () => import("./{{ subCommand.name }}").then((r) => r.default),
    {%- endfor %}
  },
  {%- endif %}
  {%- if command.setup %}
  setup() {
    // Initialize {{ command.name }} command resources
    {%- if command.database %}
    this.initializeDatabase();
    {%- endif %}
    {%- if command.config %}
    this.loadConfiguration();
    {%- endif %}
    {%- if command.logging %}
    this.setupLogging();
    {%- endif %}
    consola.info('{{ command.name }} command initialized');
  },
  {%- endif %}
  {%- if command.cleanup %}
  cleanup() {
    // Clean up {{ command.name }} command resources
    {%- if command.database %}
    this.closeDatabaseConnections();
    {%- endif %}
    {%- if command.tempFiles %}
    this.removeTempFiles();
    {%- endif %}
    {%- if command.logging %}
    this.flushLogs();
    {%- endif %}
    consola.info('{{ command.name }} command cleanup completed');
  },
  {%- endif %}
  {%- if command.run %}
  async run({ args }) {
    try {
      consola.start(`Executing {{ command.name }}...`);
      
      {%- if command.validation %}
      // Validate input arguments
      this.validateArgs(args);
      {%- endif %}
      
      {%- if command.async %}
      // Perform async {{ command.name }} operation
      const result = await this.executeCommand(args);
      {%- else %}
      // Perform {{ command.name }} operation
      const result = this.executeCommand(args);
      {%- endif %}
      
      {%- if command.output %}
      // Handle output formatting
      this.formatOutput(result, args.format || '{{ command.defaultFormat or "json" }}');
      {%- endif %}
      
      consola.success(`{{ command.name }} completed successfully`);
      
      {%- if command.returnResult %}
      return result;
      {%- endif %}
      
    } catch (error) {
      consola.error(`{{ command.name }} failed:`, error.message);
      {%- if command.errorHandling %}
      this.handleError(error, args);
      {%- endif %}
      throw error;
    }
  },
  {%- endif %}
});
