version: '3.8'

services:
  # CNS Service for testing
  cns:
    image: cns-service:test
    build:
      context: ../cns
      dockerfile: Dockerfile.test
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=test
      - PORT=8001
      - LOG_LEVEL=info
      - VALIDATION_MODE=fast
      - SEMANTIC_ENGINE=mock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # ByteStar Service for testing
  bytestar:
    image: bytestar-service:test
    build:
      context: ../bytestar
      dockerfile: Dockerfile.test
    ports:
      - "8002:8002"
    environment:
      - NODE_ENV=test
      - PORT=8002
      - LOG_LEVEL=info
      - AI_ENGINE=mock
      - PERFORMANCE_MODE=test
      - MAX_OPS_PER_SEC=690000000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Marketplace Service for testing
  marketplace:
    image: marketplace-service:test
    build:
      context: ../../
      dockerfile: Dockerfile.test
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=test
      - PORT=3001
      - LOG_LEVEL=info
      - DATABASE_URL=postgresql://test_user:test_password@test-db:5432/test_marketplace
      - CNS_SERVICE_URL=http://cns:8001
      - BYTESTAR_SERVICE_URL=http://bytestar:8002
      - REDIS_URL=redis://test-redis:6379
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      cns:
        condition: service_healthy
      bytestar:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - test-network

  # Test Database
  test-db:
    image: postgres:15
    environment:
      - POSTGRES_DB=test_marketplace
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    ports:
      - "5433:5432"
    volumes:
      - test-db-data:/var/lib/postgresql/data
      - ./fixtures/init-test-db.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_marketplace"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Test Redis
  test-redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - test-redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - test-network

  # Mock External Services
  mock-services:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ./utils/mock-services:/app
    command: ["node", "mock-external-services.js"]
    ports:
      - "9001:9001"  # Mock CNS
      - "9002:9002"  # Mock CNS WebSocket
      - "9003:9003"  # Mock ByteStar
      - "9004:9004"  # Mock ByteStar WebSocket
      - "9005:9005"  # Mock External APIs
    environment:
      - NODE_ENV=test
      - LOG_LEVEL=info
    networks:
      - test-network

  # Load Balancer for performance testing
  nginx-lb:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./config/nginx-test.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - cns
      - bytestar
      - marketplace
    networks:
      - test-network

  # Monitoring for test metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus-test.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=1h'
      - '--web.enable-lifecycle'
    networks:
      - test-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=test123
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana-dashboards:/var/lib/grafana/dashboards
    networks:
      - test-network

volumes:
  test-db-data:
    driver: local
  test-redis-data:
    driver: local
  grafana-data:
    driver: local

networks:
  test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16