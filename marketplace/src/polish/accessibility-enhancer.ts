/**
 * Accessibility Enhancer - Production Polish Feature\n * Comprehensive ARIA labels, keyboard navigation, and screen reader support\n */\n\nimport { ref, reactive, nextTick, onMounted, onUnmounted } from 'vue';\n\nexport interface AccessibilityConfig {\n  announcements: boolean;\n  keyboardTrapping: boolean;\n  highContrast: boolean;\n  reducedMotion: boolean;\n  screenReaderOptimized: boolean;\n  focusManagement: boolean;\n}\n\nexport interface AriaAttributes {\n  label?: string;\n  labelledby?: string;\n  describedby?: string;\n  expanded?: boolean;\n  haspopup?: boolean | 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog';\n  controls?: string;\n  owns?: string;\n  live?: 'off' | 'polite' | 'assertive';\n  atomic?: boolean;\n  relevant?: 'additions' | 'removals' | 'text' | 'all';\n  hidden?: boolean;\n  disabled?: boolean;\n  readonly?: boolean;\n  required?: boolean;\n  invalid?: boolean;\n  multiselectable?: boolean;\n  orientation?: 'horizontal' | 'vertical';\n  pressed?: boolean;\n  selected?: boolean;\n  checked?: boolean | 'mixed';\n  level?: number;\n  valuemin?: number;\n  valuemax?: number;\n  valuenow?: number;\n  valuetext?: string;\n  setsize?: number;\n  posinset?: number;\n}\n\nexport interface KeyboardNavigation {\n  element: HTMLElement;\n  keys: string[];\n  handler: (event: KeyboardEvent) => void;\n  trap?: boolean;\n  priority?: number;\n}\n\nexport interface FocusTrap {\n  container: HTMLElement;\n  initialFocus?: HTMLElement;\n  returnFocus?: HTMLElement;\n  allowOutsideClick?: boolean;\n}\n\nexport class AccessibilityEnhancer {\n  private config: AccessibilityConfig;\n  private liveRegion: HTMLElement | null = null;\n  private keyboardHandlers: Map<HTMLElement, KeyboardNavigation> = new Map();\n  private focusTraps: Map<string, FocusTrap> = new Map();\n  private activeTrap: string | null = null;\n  private originalStyles: Map<HTMLElement, string> = new Map();\n  private announceQueue: string[] = [];\n  private isProcessingQueue = false;\n\n  constructor(config: Partial<AccessibilityConfig> = {}) {\n    this.config = {\n      announcements: true,\n      keyboardTrapping: true,\n      highContrast: false,\n      reducedMotion: false,\n      screenReaderOptimized: true,\n      focusManagement: true,\n      ...config\n    };\n\n    this.initialize();\n  }\n\n  private initialize(): void {\n    this.createLiveRegion();\n    this.setupGlobalKeyboardHandlers();\n    this.detectPreferences();\n    this.setupMediaQueryListeners();\n  }\n\n  /**\n   * Create and manage ARIA live region for announcements\n   */\n  private createLiveRegion(): void {\n    if (!this.config.announcements) return;\n\n    this.liveRegion = document.createElement('div');\n    this.liveRegion.setAttribute('aria-live', 'polite');\n    this.liveRegion.setAttribute('aria-atomic', 'true');\n    this.liveRegion.className = 'sr-only';\n    this.liveRegion.style.cssText = `\n      position: absolute !important;\n      width: 1px !important;\n      height: 1px !important;\n      padding: 0 !important;\n      margin: -1px !important;\n      overflow: hidden !important;\n      clip: rect(0, 0, 0, 0) !important;\n      white-space: nowrap !important;\n      border: 0 !important;\n    `;\n\n    document.body.appendChild(this.liveRegion);\n  }\n\n  /**\n   * Announce message to screen readers\n   */\n  announce(message: string, priority: 'polite' | 'assertive' = 'polite'): void {\n    if (!this.config.announcements || !this.liveRegion) return;\n\n    this.announceQueue.push(message);\n    this.liveRegion.setAttribute('aria-live', priority);\n    \n    if (!this.isProcessingQueue) {\n      this.processAnnounceQueue();\n    }\n  }\n\n  private async processAnnounceQueue(): Promise<void> {\n    if (this.isProcessingQueue || !this.liveRegion) return;\n\n    this.isProcessingQueue = true;\n\n    while (this.announceQueue.length > 0) {\n      const message = this.announceQueue.shift()!;\n      this.liveRegion.textContent = message;\n      \n      // Wait for screen reader to process the announcement\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      // Clear the live region\n      this.liveRegion.textContent = '';\n      \n      // Wait before next announcement\n      await new Promise(resolve => setTimeout(resolve, 50));\n    }\n\n    this.isProcessingQueue = false;\n  }\n\n  /**\n   * Set ARIA attributes on element\n   */\n  setAriaAttributes(element: HTMLElement, attributes: AriaAttributes): void {\n    Object.entries(attributes).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        element.setAttribute(`aria-${key}`, String(value));\n      } else {\n        element.removeAttribute(`aria-${key}`);\n      }\n    });\n  }\n\n  /**\n   * Create keyboard navigation handler\n   */\n  addKeyboardNavigation(navigation: KeyboardNavigation): void {\n    if (!this.config.keyboardTrapping) return;\n\n    const handler = (event: KeyboardEvent) => {\n      if (navigation.keys.includes(event.key)) {\n        navigation.handler(event);\n      }\n    };\n\n    navigation.element.addEventListener('keydown', handler);\n    this.keyboardHandlers.set(navigation.element, {\n      ...navigation,\n      handler\n    });\n\n    // Make element focusable if not already\n    if (navigation.element.tabIndex === -1) {\n      navigation.element.tabIndex = 0;\n    }\n  }\n\n  /**\n   * Remove keyboard navigation handler\n   */\n  removeKeyboardNavigation(element: HTMLElement): void {\n    const navigation = this.keyboardHandlers.get(element);\n    if (navigation) {\n      element.removeEventListener('keydown', navigation.handler);\n      this.keyboardHandlers.delete(element);\n    }\n  }\n\n  /**\n   * Create focus trap for modals and dialogs\n   */\n  createFocusTrap(id: string, trap: FocusTrap): void {\n    if (!this.config.focusManagement) return;\n\n    this.focusTraps.set(id, trap);\n    \n    // Store current focus to return to later\n    if (!trap.returnFocus) {\n      trap.returnFocus = document.activeElement as HTMLElement;\n    }\n  }\n\n  /**\n   * Activate focus trap\n   */\n  activateFocusTrap(id: string): void {\n    if (!this.config.focusManagement) return;\n\n    const trap = this.focusTraps.get(id);\n    if (!trap) return;\n\n    this.activeTrap = id;\n    \n    // Focus initial element\n    const initialFocus = trap.initialFocus || this.findFirstFocusable(trap.container);\n    if (initialFocus) {\n      initialFocus.focus();\n    }\n\n    // Add event listeners\n    document.addEventListener('keydown', this.handleTrapKeydown);\n    document.addEventListener('focusin', this.handleTrapFocusin);\n    \n    if (!trap.allowOutsideClick) {\n      document.addEventListener('click', this.handleTrapClick);\n    }\n  }\n\n  /**\n   * Deactivate focus trap\n   */\n  deactivateFocusTrap(id: string): void {\n    if (this.activeTrap !== id) return;\n\n    const trap = this.focusTraps.get(id);\n    if (trap && trap.returnFocus) {\n      trap.returnFocus.focus();\n    }\n\n    this.activeTrap = null;\n    \n    // Remove event listeners\n    document.removeEventListener('keydown', this.handleTrapKeydown);\n    document.removeEventListener('focusin', this.handleTrapFocusin);\n    document.removeEventListener('click', this.handleTrapClick);\n  }\n\n  private handleTrapKeydown = (event: KeyboardEvent): void => {\n    if (!this.activeTrap) return;\n\n    const trap = this.focusTraps.get(this.activeTrap)!;\n    \n    if (event.key === 'Escape') {\n      this.deactivateFocusTrap(this.activeTrap);\n      return;\n    }\n\n    if (event.key === 'Tab') {\n      const focusableElements = this.getFocusableElements(trap.container);\n      if (focusableElements.length === 0) return;\n\n      const firstFocusable = focusableElements[0];\n      const lastFocusable = focusableElements[focusableElements.length - 1];\n\n      if (event.shiftKey) {\n        if (document.activeElement === firstFocusable) {\n          event.preventDefault();\n          lastFocusable.focus();\n        }\n      } else {\n        if (document.activeElement === lastFocusable) {\n          event.preventDefault();\n          firstFocusable.focus();\n        }\n      }\n    }\n  };\n\n  private handleTrapFocusin = (event: FocusEvent): void => {\n    if (!this.activeTrap) return;\n\n    const trap = this.focusTraps.get(this.activeTrap)!;\n    const target = event.target as HTMLElement;\n\n    if (!trap.container.contains(target)) {\n      const firstFocusable = this.findFirstFocusable(trap.container);\n      if (firstFocusable) {\n        firstFocusable.focus();\n      }\n    }\n  };\n\n  private handleTrapClick = (event: MouseEvent): void => {\n    if (!this.activeTrap) return;\n\n    const trap = this.focusTraps.get(this.activeTrap)!;\n    const target = event.target as HTMLElement;\n\n    if (!trap.container.contains(target)) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  /**\n   * Find focusable elements within container\n   */\n  private getFocusableElements(container: HTMLElement): HTMLElement[] {\n    const focusableSelectors = [\n      'input:not([disabled]):not([type=\"hidden\"]):not([aria-hidden])',\n      'select:not([disabled]):not([aria-hidden])',\n      'textarea:not([disabled]):not([aria-hidden])',\n      'button:not([disabled]):not([aria-hidden])',\n      'a[href]:not([aria-hidden])',\n      'area[href]:not([aria-hidden])',\n      'iframe:not([aria-hidden])',\n      '[tabindex]:not([tabindex=\"-1\"]):not([aria-hidden])',\n      '[contenteditable]:not([aria-hidden])'\n    ].join(', ');\n\n    return Array.from(container.querySelectorAll(focusableSelectors))\n      .filter(element => {\n        return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;\n      }) as HTMLElement[];\n  }\n\n  private findFirstFocusable(container: HTMLElement): HTMLElement | null {\n    const focusable = this.getFocusableElements(container);\n    return focusable[0] || null;\n  }\n\n  /**\n   * Enable high contrast mode\n   */\n  enableHighContrast(): void {\n    this.config.highContrast = true;\n    document.documentElement.setAttribute('data-high-contrast', 'true');\n    this.announce('High contrast mode enabled');\n  }\n\n  /**\n   * Disable high contrast mode\n   */\n  disableHighContrast(): void {\n    this.config.highContrast = false;\n    document.documentElement.removeAttribute('data-high-contrast');\n    this.announce('High contrast mode disabled');\n  }\n\n  /**\n   * Skip to main content\n   */\n  skipToMain(): void {\n    const main = document.querySelector('main, [role=\"main\"], #main, .main');\n    if (main) {\n      (main as HTMLElement).focus();\n      this.announce('Skipped to main content');\n    }\n  }\n\n  /**\n   * Create skip links\n   */\n  createSkipLinks(): void {\n    const skipLinks = document.createElement('div');\n    skipLinks.className = 'skip-links';\n    skipLinks.innerHTML = `\n      <a href=\"#main\" class=\"skip-link\">Skip to main content</a>\n      <a href=\"#navigation\" class=\"skip-link\">Skip to navigation</a>\n      <a href=\"#search\" class=\"skip-link\">Skip to search</a>\n    `;\n\n    skipLinks.querySelectorAll('.skip-link').forEach(link => {\n      link.addEventListener('click', (e) => {\n        e.preventDefault();\n        const target = document.querySelector((e.target as HTMLElement).getAttribute('href')!);\n        if (target) {\n          (target as HTMLElement).focus();\n          this.announce(`Skipped to ${target.textContent || 'content'}`);\n        }\n      });\n    });\n\n    document.body.insertBefore(skipLinks, document.body.firstChild);\n  }\n\n  /**\n   * Detect user preferences from system settings\n   */\n  private detectPreferences(): void {\n    // Reduced motion preference\n    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {\n      this.config.reducedMotion = true;\n      document.documentElement.setAttribute('data-reduced-motion', 'true');\n    }\n\n    // High contrast preference\n    if (window.matchMedia('(prefers-contrast: high)').matches) {\n      this.enableHighContrast();\n    }\n\n    // Color scheme preference\n    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      document.documentElement.setAttribute('data-theme', 'dark');\n    }\n  }\n\n  /**\n   * Setup media query listeners for preference changes\n   */\n  private setupMediaQueryListeners(): void {\n    const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    reducedMotionQuery.addEventListener('change', (e) => {\n      this.config.reducedMotion = e.matches;\n      if (e.matches) {\n        document.documentElement.setAttribute('data-reduced-motion', 'true');\n        this.announce('Reduced motion enabled');\n      } else {\n        document.documentElement.removeAttribute('data-reduced-motion');\n        this.announce('Animations enabled');\n      }\n    });\n\n    const contrastQuery = window.matchMedia('(prefers-contrast: high)');\n    contrastQuery.addEventListener('change', (e) => {\n      if (e.matches) {\n        this.enableHighContrast();\n      } else {\n        this.disableHighContrast();\n      }\n    });\n  }\n\n  /**\n   * Setup global keyboard handlers\n   */\n  private setupGlobalKeyboardHandlers(): void {\n    document.addEventListener('keydown', (event) => {\n      // Alt + M: Skip to main content\n      if (event.altKey && event.key === 'm') {\n        event.preventDefault();\n        this.skipToMain();\n      }\n\n      // Alt + H: Toggle high contrast\n      if (event.altKey && event.key === 'h') {\n        event.preventDefault();\n        if (this.config.highContrast) {\n          this.disableHighContrast();\n        } else {\n          this.enableHighContrast();\n        }\n      }\n    });\n  }\n\n  /**\n   * Get accessibility status\n   */\n  getStatus(): {\n    config: AccessibilityConfig;\n    activeTrap: string | null;\n    announceQueueSize: number;\n    keyboardHandlers: number;\n    focusTraps: number;\n  } {\n    return {\n      config: { ...this.config },\n      activeTrap: this.activeTrap,\n      announceQueueSize: this.announceQueue.length,\n      keyboardHandlers: this.keyboardHandlers.size,\n      focusTraps: this.focusTraps.size\n    };\n  }\n\n  /**\n   * Cleanup\n   */\n  destroy(): void {\n    // Remove live region\n    if (this.liveRegion) {\n      this.liveRegion.remove();\n    }\n\n    // Remove keyboard handlers\n    this.keyboardHandlers.forEach((navigation, element) => {\n      element.removeEventListener('keydown', navigation.handler);\n    });\n    this.keyboardHandlers.clear();\n\n    // Deactivate any active focus trap\n    if (this.activeTrap) {\n      this.deactivateFocusTrap(this.activeTrap);\n    }\n\n    // Clear focus traps\n    this.focusTraps.clear();\n\n    // Remove global event listeners\n    document.removeEventListener('keydown', this.handleTrapKeydown);\n    document.removeEventListener('focusin', this.handleTrapFocusin);\n    document.removeEventListener('click', this.handleTrapClick);\n  }\n}\n\n/**\n * Vue 3 Composable\n */\nexport function useAccessibility(config?: Partial<AccessibilityConfig>) {\n  const enhancer = reactive(new AccessibilityEnhancer(config));\n  const isHighContrast = ref(config?.highContrast || false);\n  const isReducedMotion = ref(config?.reducedMotion || false);\n\n  const announce = (message: string, priority?: 'polite' | 'assertive') => {\n    enhancer.announce(message, priority);\n  };\n\n  const setAria = (element: HTMLElement, attributes: AriaAttributes) => {\n    enhancer.setAriaAttributes(element, attributes);\n  };\n\n  const addKeyboard = (navigation: KeyboardNavigation) => {\n    enhancer.addKeyboardNavigation(navigation);\n  };\n\n  const createTrap = (id: string, trap: FocusTrap) => {\n    enhancer.createFocusTrap(id, trap);\n  };\n\n  const activateTrap = (id: string) => {\n    enhancer.activateFocusTrap(id);\n  };\n\n  const deactivateTrap = (id: string) => {\n    enhancer.deactivateFocusTrap(id);\n  };\n\n  const toggleHighContrast = () => {\n    if (isHighContrast.value) {\n      enhancer.disableHighContrast();\n      isHighContrast.value = false;\n    } else {\n      enhancer.enableHighContrast();\n      isHighContrast.value = true;\n    }\n  };\n\n  const skipToMain = () => {\n    enhancer.skipToMain();\n  };\n\n  const status = computed(() => enhancer.getStatus());\n\n  onMounted(() => {\n    enhancer.createSkipLinks();\n  });\n\n  onUnmounted(() => {\n    enhancer.destroy();\n  });\n\n  return {\n    announce,\n    setAria,\n    addKeyboard,\n    createTrap,\n    activateTrap,\n    deactivateTrap,\n    toggleHighContrast,\n    skipToMain,\n    isHighContrast: readonly(isHighContrast),\n    isReducedMotion: readonly(isReducedMotion),\n    status\n  };\n}\n\n/**\n * Accessibility directive for Vue\n */\nexport const vAccessible = {\n  mounted(el: HTMLElement, binding: { value: AriaAttributes }) {\n    const enhancer = new AccessibilityEnhancer();\n    enhancer.setAriaAttributes(el, binding.value);\n    (el as any)._accessibilityEnhancer = enhancer;\n  },\n  updated(el: HTMLElement, binding: { value: AriaAttributes }) {\n    const enhancer = (el as any)._accessibilityEnhancer;\n    if (enhancer) {\n      enhancer.setAriaAttributes(el, binding.value);\n    }\n  },\n  unmounted(el: HTMLElement) {\n    const enhancer = (el as any)._accessibilityEnhancer;\n    if (enhancer) {\n      enhancer.destroy();\n      delete (el as any)._accessibilityEnhancer;\n    }\n  }\n};\n